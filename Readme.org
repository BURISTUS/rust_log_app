* Server\Client app
** Project structure
#+begin_src

  server
    src
      middleware
        before_request.rs
        mod.rs
      routes
        health_check.rs
        mod.rs
      stats
        server.rs
        client.rs
        mod.rs
      utils
        config.rs
        errors.rs
        mod.rs
      startup.rs
      main.rs
      lib.rs
    stats
      server_stats.json
    Cargo.toml
    configuration.yaml

  client
    src
      utils
        config.rs
        mod.rs
      cmd.rs
      lib.rs
      main.rs
    Cargo.toml

Readme.org
#+end_src


** Build
*** To run localy
In first terminal
Server
#+begin_src
cd server

cargo run
#+end_src
In second terminal.
Client
#+begin_src
cd client

cargo run -- --requests n (n is number of requests)
#+end_src

** Problem Statement

**** Requirements
Тестовое задани:Серверное приложение принимает клиентское подключение, обрабатывает поступающие параллельно запросы выделяя на каждый по 100-500 мс (задержка выбирается рандомно), возвращает ответ клиенту. Задача сервера обработать все запросы одного клиента максимально быстро. Сервер должен принимать не более пяти одновременных клиентских подключений. Клиенты сверх установленного лимита ждут освобождения сервера.
По завершении сеанса связи (отключение клиента) программа протоколирует статистику подключения состоящую из:
- количества поступивших запросов;
- максимального, минимального и среднего времени обработки запроса;
- общее время обслуживания клиента (время сеанса).
Сервер работает и обслуживает клиентов до получения сигнала Ctrl-C.
При завершении работы сервер закрывает порт прослушивания протоколирует общую статистику по:
- количеству обработанных клиентских подключений;
- максимальному, минимальному и среднему времени сеанса с клиентом;
- количество клиентов, не дождавшихся обслуживания.

Клиентское приложение после запуска устанавливает подключение к серверу, отправляет серверу N одновременных сообщений в режиме мультиплексирования (HTTP/2 multiplexing). Получив ответы на все отправленные сообщения, потеряв связь или не дождавшись подключения к серверу клиент завершает работу.
При завершении работы программа протоколирует статистику, состоящую из:
- количества сообщений на которые получен ответ;
- максимального, минимального и среднего времени ответа сервером на сообщение;
- общего время обмена данными с сервером.
Максимальное время ожидания подключения к серверу 2 секунды.
Параметр N передаётся в приложение через аргумент командной строки и ограничен диапазоном от 1 до 100. При передаче параметра вне установленного диапазона протоколировать ошибку и завершать работу приложения.

Требований к содержимому команд и ответов не предъявляется.
